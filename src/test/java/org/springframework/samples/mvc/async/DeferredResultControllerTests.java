package org.springframework.samples.mvc.async;

import static org.hamcrest.Matchers.instanceOf;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.webAppContextSetup;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.samples.mvc.AbstractContextControllerTests;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.web.servlet.ModelAndView;

import com.diffblue.deeptestutils.Reflector;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.rules.ExpectedException;
import org.springframework.samples.mvc.async.DeferredResultController;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Queue;

@RunWith(SpringJUnit4ClassRunner.class)
public class DeferredResultControllerTests extends AbstractContextControllerTests {

	@Rule public ExpectedException thrown = ExpectedException.none();

	/* testedClasses: DeferredResultController */
	/*
	* Test generated by Diffblue Deeptest.
	* This test case covers:
	*  - conditional line 58 branch to line 58
	*/

	@Test
	public void processQueuesOutputNullPointerException() throws InvocationTargetException {

		// Arrange
		DeferredResultController objectUnderTest = ((DeferredResultController)Reflector.getInstance(
			"org.springframework.samples.mvc.async.DeferredResultController"));
		Reflector.setField(objectUnderTest, "responseBodyQueue", null);
		Queue queue = ((Queue)Reflector.getInstance("java.util.Queue"));
		Reflector.setField(objectUnderTest, "exceptionQueue", queue);
		Queue queue1 = ((Queue)Reflector.getInstance("java.util.Queue"));
		Reflector.setField(objectUnderTest, "mavQueue", queue1);

		// Act
		thrown.expect(NullPointerException.class);
		objectUnderTest.processQueues();

		// Method is not expected to return due to exception thrown
	}

	/* testedClasses: DeferredResultController */
	/*
	* Test generated by Diffblue Deeptest.
	* This test case covers the entire method.
	*/

	@Test
	public void handleExceptionInputNotNullOutputNotNull() throws InvocationTargetException {

		// Arrange
		DeferredResultController objectUnderTest = ((DeferredResultController)Reflector.getInstance(
			"org.springframework.samples.mvc.async.DeferredResultController"));
		Reflector.setField(objectUnderTest, "responseBodyQueue", null);
		Reflector.setField(objectUnderTest, "exceptionQueue", null);
		Reflector.setField(objectUnderTest, "mavQueue", null);
		IllegalStateException ex =
			((IllegalStateException)Reflector.getInstance("java.lang.IllegalStateException"));
		Reflector.setField(ex, "detailMessage", "");
		Reflector.setField(ex, "cause", null);

		// Act
		String retval = objectUnderTest.handleException(ex);

		// Assert result
		Assert.assertEquals("Handled exception: ", retval);
	}

	private MockMvc mockMvc;

	@Before
	public void setup() throws Exception {
		this.mockMvc = webAppContextSetup(this.wac).build();
	}

	@Test
	public void responseBody() throws Exception {
		MvcResult mvcResult = this.mockMvc.perform(get("/async/deferred-result/response-body"))
			.andExpect(status().isOk())
			.andExpect(request().asyncStarted())
			.andExpect(request().asyncResult("Deferred result"))
			.andReturn();

		this.mockMvc.perform(asyncDispatch(mvcResult))
			.andExpect(status().isOk())
			.andExpect(content().contentType("text/plain;charset=ISO-8859-1"))
			.andExpect(content().string("Deferred result"));
	}

	@Test
	public void view() throws Exception {
		MvcResult mvcResult = this.mockMvc.perform(get("/async/deferred-result/model-and-view"))
			.andExpect(status().isOk())
			.andExpect(request().asyncStarted())
			.andExpect(request().asyncResult(instanceOf(ModelAndView.class)))
			.andReturn();

		this.mockMvc.perform(asyncDispatch(mvcResult))
			.andExpect(status().isOk())
			.andExpect(forwardedUrl("/WEB-INF/views/views/html.jsp"))
			.andExpect(model().attributeExists("javaBean"));
	}

	@Test
	public void exception() throws Exception {
		MvcResult mvcResult = this.mockMvc.perform(get("/async/deferred-result/exception"))
			.andExpect(status().isOk())
			.andExpect(request().asyncStarted())
			.andExpect(request().asyncResult(instanceOf(IllegalStateException.class)))
			.andReturn();

		this.mockMvc.perform(asyncDispatch(mvcResult))
			.andExpect(status().isOk())
			.andExpect(content().contentType("text/plain;charset=ISO-8859-1"))
			.andExpect(content().string("Handled exception: DeferredResult error"));
	}

}
